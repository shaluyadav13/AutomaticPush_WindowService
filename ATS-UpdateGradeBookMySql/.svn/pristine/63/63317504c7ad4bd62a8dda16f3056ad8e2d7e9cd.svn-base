using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Org.BouncyCastle.Crypto.Engines;
using Org.BouncyCastle.Crypto.Macs;
using Org.BouncyCastle.Crypto.Parameters;
using System.IO;
using System.Net;
//using System.Threading;
using System.Web.Script.Serialization;
using Newtonsoft.Json;
using System.Dynamic;

namespace AttendaceTrackingService
{
    class UpdateGradebook
    {
        public int callNumbersCount;
        public string[] callNumbers;
        public UpdateGradebook()
        {
            callNumbers = new string[callNumbersCount];
        }
        public void UpdateCourses()
        {
            #region VariablesDeclaration

            Dictionary<string, List<int>> emailandattendance;
            List<int> studentAttendanceInfo;
            //variables to store unique identifiers
            Dictionary<string, string> customGradebookCategoryAndGuid = new Dictionary<string, string>();
            Dictionary<string, string> customGradebookItemAndGuid = new Dictionary<string, string>();
            Dictionary<string, int> emailanduserId = new Dictionary<string, int>();
            Dictionary<int, List<int>> userIdAndgrades = new Dictionary<int, List<int>>();
            int gradeId = 0, present = 0, missed = 0;
            double percentage = 0;
            string courseHomeUnitId = "";
            string customCategoryGuidOfAttended = "", gradebookItemGuidOfAttended = "";
            string customCategoryGuidOfMissed = "", gradebookItemGuidOfMissed = "";
            string customCategoryGuidOfPercentage = "", gradebookItemGuidOfPercentage = "";
            int courseCount = 0;
            bool isAttendedMissedAttendancePercentageExists = false;
            bool isAttendedAttendancePercentageExists = false;
            bool isMissedAttendancePercentageExists = false;
            #endregion //VariablesDeclaration
            //File.WriteAllText(@"C:\Thread1.txt", String.Empty);

            try
            {

                ApplicationLog.WriteThread1Log("Updating Gradebook in this thread started at: " + DateTime.Now + "_" + DateTime.Now.DayOfWeek);
                ApplicationLog.WriteThread1Log("Total courses updating in this thread are:" + callNumbersCount);

                #region Updating all courses
                foreach (string callNum in callNumbers)
                {
                    emailandattendance = new Dictionary<string, List<int>>();
                    //courseCount variable is to log the current number of course which is updating
                    courseCount++;
                    ApplicationLog.WriteThread1Log(courseCount + "." + "Course updating: _" + callNum);
                    //getting enrolled students ina course from our database
                    using (AttendanceTrackingDBDataContext db = new AttendanceTrackingDBDataContext())
                    {
                        //var studentEnrolls = from stu in db.students
                        //                     join en in db.enrollments
                        //                     on stu.student_id equals en.student_id
                        //                     where en.call_number == callNum
                        //                     select new { stu.s_number, stu.student_id };
                        int count = (from stu in db.students.ToList()
                                     join en in db.enrollments
                                     on stu.student_id equals en.student_id
                                     where en.call_number == callNum
                                     select stu).Count();


                        ApplicationLog.WriteThread1Log(courseCount + "." + "Total number of students in " + callNum + " are " + count);
                        //getting total number of classes for that course


                        //var totalClasses1 = (from at in db.attendances.ToList()
                        //                     where at.call_number == callNum
                        //                     select DateTime.Parse(at.created_at.ToString("MM-dd-yyyy")));

                        int totalClasses = (from at in db.attendances.ToList()
                                            where at.call_number == callNum
                                            select DateTime.Parse(at.created_at.Date.ToString("MM-dd-yyyy"))).Distinct().Count();

                        ApplicationLog.WriteThread1Log(courseCount + "." + "Total classes for " + callNum + " " + totalClasses);
                        //int count = studentEnrolls2.Count();
                        var studentEnrolls = from stu in db.students
                                             join en in db.enrollments
                                             on stu.student_id equals en.student_id
                                             where en.call_number == callNum
                                             select new { stu.s_number, stu.student_id };


                        //getting student attendance details from database and adding it to emailandattendace list
                        #region studentattendaceInfo
                        if (count != 0)
                        {
                            foreach (var students in studentEnrolls.ToList())
                            {
                                studentAttendanceInfo = new List<int>();
                                present = (from att in db.attendances.ToList()
                                           where att.call_number == callNum && att.student_id == students.student_id
                                           select DateTime.Parse(att.created_at.Date.ToString("MM-dd-yyyy"))).Distinct().Count();
                                studentAttendanceInfo.Add(present);
                                missed = totalClasses - present;
                                studentAttendanceInfo.Add(missed);
                                emailandattendance.Add(students.s_number, studentAttendanceInfo);
                            }
                        #endregion
                            string httpMethod = "GET";
                            string body = "";
                            //to get the Northwest Online courseId for a course
                            Uri url = new Uri(String.Format("{0}ccn={1}", "https://api.learningstudio.com/courses/", callNum));
                            string courseID = "";
                            using (CourseIdReportDataContext Cid = new CourseIdReportDataContext())
                            {
                                courseID = (from ecourse in Cid.CourseIdReports.ToList()
                                            where ecourse.callNumber == callNum
                                            select ecourse.courseId).First();
                            }

                            ApplicationLog.WriteThread1Log(courseCount + "." + "Northwest Online course id for  " + callNum + " is " + courseID);
                            httpMethod = "GET";
                            body = "";

                            //to get all the existing gradebook categories in a course and save them in customGradebookCategoryAndGuid
                            url = new Uri(String.Format("{0}{1}/gradebook/customCategories", "https://api.learningstudio.com/courses/", courseID));
                            customGradebookCategoryAndGuid = getGradebookCategory(httpMethod, url, body);

                            //ApplicationLog.WriteThread1Log("custom gradebook categories");

                            //Gets the list of students registered in course     
                            httpMethod = "GET";
                            url = new Uri(String.Format("{0}{1}/students", "https://api.learningstudio.com/courses/", courseID));
                            body = "";
                            emailanduserId = getStudents(httpMethod, url, body);
                            userIdAndgrades = UserIdAndGrades(emailandattendance, emailanduserId);

                            //ApplicationLog.WriteThread1Log("students and attendance info");
                            //to get unit ID for course home gradebook item
                            httpMethod = "GET";
                            url = new Uri(String.Format("{0}{1}/items", "https://api.learningstudio.com/courses/", courseID));
                            courseHomeUnitId = getCoureHomeId(httpMethod, url, body);

                            // ApplicationLog.WriteThread1Log("course home unit id " + courseHomeUnitId);

                            #region secondTime
                            //creates custom gradebook categories if they are not present in course
                            if (customGradebookCategoryAndGuid.ContainsValue("Attended") && customGradebookCategoryAndGuid.ContainsValue("Missed"))
                            {
                                //check if custom gradebook items are created for custom gradebook categories
                                httpMethod = "GET";
                                url = new Uri(String.Format("{0}{1}/gradebookItems", "https://api.learningstudio.com/courses/", courseID));
                                customGradebookItemAndGuid = getGradebookItems(httpMethod, url, body);

                                //getting the GUID values of custome gradebook items
                                gradebookItemGuidOfAttended = customGradebookItemAndGuid.FirstOrDefault(x => x.Value.ToLower() == "attended").Key;
                                gradebookItemGuidOfMissed = customGradebookItemAndGuid.FirstOrDefault(x => x.Value.ToLower() == "missed").Key;
                                //gradebookItemGuidOfPercentage = customGradebookItemAndGuid.FirstOrDefault(x => x.Value.ToLower() == "attendance percentage").Key;


                                //getting isIncludedingrade or extra credit values for gradebook item attended
                                httpMethod = "GET";
                                url = new Uri(String.Format("{0}{1}/gradebookItems/{2}", "https://api.learningstudio.com/courses/", courseID, gradebookItemGuidOfAttended));
                                bool[] isIncludedAndExtraCredit = getIncludedAndextraCreditForItem(httpMethod, url, body);

                                //updating the gradebook item attended for the course with possible points
                                httpMethod = "PUT";
                                url = new Uri(String.Format("{0}{1}/gradebook/gradebookItems/{2}", "https://api.learningstudio.com/courses/", courseID, gradebookItemGuidOfAttended));
                                body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": " + isIncludedAndExtraCredit[0].ToString().ToLower() + ",\"isExtraCredit\": " + isIncludedAndExtraCredit[1].ToString().ToLower() + ",\"pointsPossible\": " + totalClasses + "}}";
                                connectingAPI(httpMethod, url, body);

                                //to update the registered students grades for the gradebook items in the course
                                foreach (int userId in userIdAndgrades.Keys)
                                {
                                    // ApplicationLog.WriteThread1Log("entered updating users " + DateTime.Now + "_" + DateTime.Now.DayOfWeek);
                                    percentage = ((((double)userIdAndgrades[userId][0]) / totalClasses) * 100);
                                    httpMethod = "GET";
                                    url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebook/userGradebookItems?expand=grade"));
                                    body = "";
                                    isAttendedAttendancePercentageExists = getAllGradebookItemIdsOfUser(httpMethod, url, body);
                                    if (isAttendedAttendancePercentageExists)
                                    {
                                        //to get the grade Id's of user for attended
                                        httpMethod = "GET";
                                        url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfAttended + "/grade"));
                                        body = "";
                                        gradeId = getGradeId(httpMethod, url, body);
                                        //to update the grade of the user for item attended
                                        httpMethod = "PUT";
                                        url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfAttended + "/grade"));
                                        body = "{\"grade\": {\"id\":" + gradeId + ", \"points\": " + userIdAndgrades[userId][0] + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                        connectingAPI(httpMethod, url, body);
                                    }
                                    else
                                    {
                                        httpMethod = "POST";
                                        url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfAttended + "/grade"));
                                        body = "{\"grade\": {\"points\": " + userIdAndgrades[userId][0] + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                        connectingAPI(httpMethod, url, body);
                                    }
                                    percentage = ((((double)userIdAndgrades[userId][0]) / totalClasses) * 100);
                                    httpMethod = "GET";
                                    url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebook/userGradebookItems?expand=grade"));
                                    body = "";
                                                                        isMissedAttendancePercentageExists = getMissedGradebookItemIdOfUser(httpMethod, url, body);
                                    if (isMissedAttendancePercentageExists)
                                    {
                                        //to get the grade Id's of user for missed
                                        httpMethod = "GET";
                                        url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfMissed + "/grade"));
                                        body = "";
                                        gradeId = getGradeId(httpMethod, url, body);
                                        //to update the grade of the user for item missed
                                        httpMethod = "PUT";
                                        url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfMissed + "/grade"));
                                        body = "{\"grade\": {\"id\":" + gradeId + ", \"points\": " + userIdAndgrades[userId][1] + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                        connectingAPI(httpMethod, url, body);
                                    }
                                    else
                                    {
                                        httpMethod = "POST";
                                        url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfMissed + "/grade"));
                                        body = "{\"grade\": {\"points\": " + userIdAndgrades[userId][1] + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                        connectingAPI(httpMethod, url, body);

                                    }
                                }

                                //  ApplicationLog.WriteThread1Log(courseCount + "." + "Gradebook with attendance information is updated for " + callNum + " at " + DateTime.Now + "_" + DateTime.Now.DayOfWeek);

                            }
                            #endregion
                            #region firstTime
                            else
                            {
                                // ApplicationLog.WriteThread1Log("fist time");
                                url = new Uri(String.Format("{0}{1}/gradebook/customCategories", "https://api.learningstudio.com/courses/", courseID));
                                httpMethod = "POST";

                                //creates a custom gradebook category in course with name attended
                                body = "{\"customCategories\": {\"title\":\"Attended\",\"isAssignable\": true}}";
                                connectingAPI(httpMethod, url, body);

                                //creates a custom gradebook category in course with name Missed
                                body = "{\"customCategories\": {\"title\":\"Missed\",\"isAssignable\": true}}";
                                connectingAPI(httpMethod, url, body);

                                //creates a custom gradebook category in course with name Attendance Percentage
                                //body = "{\"customCategories\": {\"title\":\"Attendance Percentage\",\"isAssignable\": true}}";
                                //connectingAPI(httpMethod, url, body);

                                //to get GUID's of created gradebook categories in a course and save them in customGradebookCategoryAndGuid to create gradebook items
                                httpMethod = "GET";
                                body = "";
                                url = new Uri(String.Format("{0}{1}/gradebook/customCategories", "https://api.learningstudio.com/courses/", courseID));
                                customGradebookCategoryAndGuid = getGradebookCategory(httpMethod, url, body);

                                //getting the GUID values of custom gradebook  categories
                                //customCategoryGuidOfPercentage = customGradebookCategoryAndGuid.FirstOrDefault(x => x.Value.ToLower() == "attendance percentage").Key;
                                customCategoryGuidOfMissed = customGradebookCategoryAndGuid.FirstOrDefault(x => x.Value.ToLower() == "missed").Key;
                                customCategoryGuidOfAttended = customGradebookCategoryAndGuid.FirstOrDefault(x => x.Value.ToLower() == "attended").Key;

                                //creates custom gradebook items  in course

                                //Creating a custom gradebook item for gradebook category attended
                                httpMethod = "POST";
                                url = new Uri(String.Format("{0}{1}/gradebook/customCategories/{2}/customItems", "https://api.learningstudio.com/courses/", courseID, customCategoryGuidOfAttended));

                                body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": false,\"isExtraCredit\": false,\"pointsPossible\": " + totalClasses + "}}";
                                connectingAPI(httpMethod, url, body);

                                //Creating a custom gradebook item for gradebook category missed
                                url = new Uri(String.Format("{0}{1}/gradebook/customCategories/{2}/customItems", "https://api.learningstudio.com/courses/", courseID, customCategoryGuidOfMissed));

                                body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": false,\"isExtraCredit\": false,\"pointsPossible\": " + 0 + "}}";
                                connectingAPI(httpMethod, url, body);

                                //Creating a custom gradebook item for gradebook category Attendane Percentage
                                //url = new Uri(String.Format("{0}{1}/gradebook/customCategories/{2}/customItems", "https://api.learningstudio.com/courses/", courseID, customCategoryGuidOfPercentage));

                                //body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": false,\"isExtraCredit\": false,\"pointsPossible\": " + 0 + "}}";
                                //connectingAPI(httpMethod, url, body);

                                //to get the GUID'S of newly created gradebook items
                                httpMethod = "GET";
                                url = new Uri(String.Format("{0}{1}/gradebookItems", "https://api.learningstudio.com/courses/", courseID));
                                customGradebookItemAndGuid = getGradebookItems(httpMethod, url, body);

                                //getting the GUID values of custome gradebook items
                                gradebookItemGuidOfAttended = customGradebookItemAndGuid.FirstOrDefault(x => x.Value.ToLower() == "attended").Key;
                                gradebookItemGuidOfMissed = customGradebookItemAndGuid.FirstOrDefault(x => x.Value.ToLower() == "missed").Key;
                                //gradebookItemGuidOfPercentage = customGradebookItemAndGuid.FirstOrDefault(x => x.Value.ToLower() == "attendance percentage").Key;

                                //updating the gradebook item attended for the course with possible points
                                httpMethod = "PUT";
                                url = new Uri(String.Format("{0}{1}/gradebook/gradebookItems/{2}", "https://api.learningstudio.com/courses/", courseID, gradebookItemGuidOfAttended));
                                body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": false,\"isExtraCredit\": false,\"pointsPossible\": " + totalClasses + "}}";
                                connectingAPI(httpMethod, url, body);

                                url = new Uri(String.Format("{0}{1}/gradebook/gradebookItems/{2}", "https://api.learningstudio.com/courses/", courseID, gradebookItemGuidOfMissed));
                                body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": false,\"isExtraCredit\": false,\"pointsPossible\":0}}";

                                connectingAPI(httpMethod, url, body);

                                //url = new Uri(String.Format("{0}{1}/gradebook/gradebookItems/{2}", "https://api.learningstudio.com/courses/", courseID, gradebookItemGuidOfPercentage));
                                //body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": false,\"isExtraCredit\": false,\"pointsPossible\": 0}}";

                                //connectingAPI(httpMethod, url, body);

                                foreach (int userId in userIdAndgrades.Keys)
                                {
                                    // ApplicationLog.WriteThread1Log("updating users entered " + DateTime.Now + "_" + DateTime.Now.DayOfWeek);
                                    httpMethod = "POST";
                                    url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfMissed + "/grade"));
                                    body = "{\"grade\": {\"points\": " + userIdAndgrades[userId][1] + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                    connectingAPI(httpMethod, url, body);

                                    url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfAttended + "/grade"));
                                    body = "{\"grade\": {\"points\": " + userIdAndgrades[userId][0] + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                    connectingAPI(httpMethod, url, body);

                                    //calculates attendance percentage of a student
                                    //percentage = ((((double)userIdAndgrades[userId][0]) / totalClasses) * 100);


                                    //url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfPercentage + "/grade"));
                                    //body = "{\"grade\": {\"points\": " + percentage + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                    //connectingAPI(httpMethod, url, body);
                                }
                                //ApplicationLog.WriteThread1Log(courseCount + "." + "Gradebook with attendance information is updated for " + callNum + " at " + DateTime.Now + "_" + DateTime.Now.DayOfWeek);

                            }
                            #endregion //end of updating second time
                        }
                    }
                    ApplicationLog.WriteThread1Log(courseCount + "." + "Gradebook with attendance information is updated for " + callNum + " at " + DateTime.Now + "_" + DateTime.Now.DayOfWeek);
                    ApplicationLog.WriteThread1Log("------------------------------------------------------------------------");
                }
                #endregion //end of updating all courses

            }//end of try
            catch (Exception ex)
            {

                ApplicationLog.WriteThread1Log(ex.Message + " " + DateTime.Now + "_" + DateTime.Now.DayOfWeek);
                throw ex;
            }

        }
        public void UpdateCourses1()
        {
            #region VariablesDeclaration

            Dictionary<string, List<int>> emailandattendance;
            List<int> studentAttendanceInfo;
            //variables to store unique identifiers
            Dictionary<string, string> customGradebookCategoryAndGuid = new Dictionary<string, string>();
            Dictionary<string, string> customGradebookItemAndGuid = new Dictionary<string, string>();
            Dictionary<string, int> emailanduserId = new Dictionary<string, int>();
            Dictionary<int, List<int>> userIdAndgrades = new Dictionary<int, List<int>>();
            int gradeId = 0, present = 0, missed = 0;
            double percentage = 0;
            string courseHomeUnitId = "";
            string customCategoryGuidOfAttended = "", gradebookItemGuidOfAttended = "";
            string customCategoryGuidOfMissed = "", gradebookItemGuidOfMissed = "";
            string customCategoryGuidOfPercentage = "", gradebookItemGuidOfPercentage = "";
            int courseCount = 0;
            bool isAttendedMissedAttendancePercentageExists = false;
            bool isAttendedAttendancePercentageExists = false;
            bool isMissedAttendancePercentageExists = false;
            #endregion //VariablesDeclaration
            //File.WriteAllText(@"C:\Thread2.txt", String.Empty);

            try
            {

                ApplicationLog.WriteThread2Log("Updating Gradebook in this thread started at: " + DateTime.Now + "_" + DateTime.Now.DayOfWeek);
                ApplicationLog.WriteThread2Log("Total courses updating in this thread are:" + callNumbersCount);
                #region Updating all courses
                foreach (string callNum in callNumbers)
                {
                    emailandattendance = new Dictionary<string, List<int>>();
                    //courseCount variable is to log the current number of course which is updating
                    courseCount++;
                    ApplicationLog.WriteThread2Log(courseCount + "." + "Course updating: _" + callNum);
                    //getting enrolled students ina course from our database
                    using (AttendanceTrackingDBDataContext db = new AttendanceTrackingDBDataContext())
                    {
                        //var studentEnrolls = from stu in db.students
                        //                     join en in db.enrollments
                        //                     on stu.student_id equals en.student_id
                        //                     where en.call_number == callNum
                        //                     select new { stu.s_number, stu.student_id };

                        int count = (from stu in db.students.ToList()
                                     join en in db.enrollments
                                     on stu.student_id equals en.student_id
                                     where en.call_number == callNum
                                     select stu).Count();
                        ApplicationLog.WriteThread2Log(courseCount + "." + "Total number of students in " + callNum + " are " + count);
                        //getting total number of classes for that course
                        int totalClasses = (from at in db.attendances.ToList()
                                            where at.call_number == callNum
                                            select DateTime.Parse(at.created_at.Date.ToString("MM-dd-yyyy"))).Distinct().Count();

                        ApplicationLog.WriteThread2Log(courseCount + "." + "Total classes for " + callNum + " " + totalClasses);

                        var studentEnrolls = from stu in db.students
                                             join en in db.enrollments
                                             on stu.student_id equals en.student_id
                                             where en.call_number == callNum
                                             select new { stu.s_number, stu.student_id };

                        //getting student attendance details from database and adding it to emailandattendace list
                        #region studentattendaceInfo
                        if (count != 0)
                        {
                            foreach (var students in studentEnrolls.ToList())
                            {
                                studentAttendanceInfo = new List<int>();
                                present = (from att in db.attendances.ToList()
                                           where att.call_number == callNum && att.student_id == students.student_id
                                           select DateTime.Parse(att.created_at.Date.ToString("MM-dd-yyyy"))).Distinct().Count();
                                studentAttendanceInfo.Add(present);
                                missed = totalClasses - present;
                                studentAttendanceInfo.Add(missed);
                                emailandattendance.Add(students.s_number, studentAttendanceInfo);
                                //+ "_" + callNum
                            }
                        #endregion

                            //"8969167";
                            string httpMethod = "GET";
                            string body = "";
                            //to get the Northwest Online courseId for a course
                            Uri url = new Uri(String.Format("{0}ccn={1}", "https://api.learningstudio.com/courses/", callNum));
                            string courseID = "";
                            using (CourseIdReportDataContext Cid = new CourseIdReportDataContext())
                            {
                                courseID = (from ecourse in Cid.CourseIdReports.ToList()
                                            where ecourse.callNumber == callNum
                                            select ecourse.courseId).First();
                            }

                            ApplicationLog.WriteThread2Log(courseCount + "." + "Northwest Online course id for  " + callNum + " is " + courseID);
                            httpMethod = "GET";
                            body = "";

                            //to get all the existing gradebook categories in a course and save them in customGradebookCategoryAndGuid
                            url = new Uri(String.Format("{0}{1}/gradebook/customCategories", "https://api.learningstudio.com/courses/", courseID));
                            customGradebookCategoryAndGuid = getGradebookCategory(httpMethod, url, body);

                            //Gets the list of students registered in course     
                            httpMethod = "GET";
                            url = new Uri(String.Format("{0}{1}/students", "https://api.learningstudio.com/courses/", courseID));
                            body = "";
                            emailanduserId = getStudents(httpMethod, url, body);
                            userIdAndgrades = UserIdAndGrades(emailandattendance, emailanduserId);

                            //to get unit ID for course home gradebook item
                            httpMethod = "GET";
                            url = new Uri(String.Format("{0}{1}/items", "https://api.learningstudio.com/courses/", courseID));
                            courseHomeUnitId = getCoureHomeId(httpMethod, url, body);


                            #region secondTime
                            //creates custom gradebook categories if they are not present in course
                            if (customGradebookCategoryAndGuid.ContainsValue("Attended") && customGradebookCategoryAndGuid.ContainsValue("Missed"))
                            {

                                //check if custom gradebook items are created for custom gradebook categories
                                httpMethod = "GET";
                                url = new Uri(String.Format("{0}{1}/gradebookItems", "https://api.learningstudio.com/courses/", courseID));
                                customGradebookItemAndGuid = getGradebookItems(httpMethod, url, body);

                                //getting the GUID values of custome gradebook items
                                gradebookItemGuidOfAttended = customGradebookItemAndGuid.FirstOrDefault(x => x.Value.ToLower() == "attended").Key;
                                gradebookItemGuidOfMissed = customGradebookItemAndGuid.FirstOrDefault(x => x.Value.ToLower() == "missed").Key;
                                //gradebookItemGuidOfPercentage = customGradebookItemAndGuid.FirstOrDefault(x => x.Value.ToLower() == "attendance percentage").Key;

                                //getting isIncludedingrade or extra credit values for gradebook item attended
                                httpMethod = "GET";
                                url = new Uri(String.Format("{0}{1}/gradebookItems/{2}", "https://api.learningstudio.com/courses/", courseID, gradebookItemGuidOfAttended));
                                bool[] isIncludedAndExtraCredit = getIncludedAndextraCreditForItem(httpMethod, url, body);

                                //updating the gradebook item attended for the course with possible points
                                httpMethod = "PUT";
                                url = new Uri(String.Format("{0}{1}/gradebook/gradebookItems/{2}", "https://api.learningstudio.com/courses/", courseID, gradebookItemGuidOfAttended));
                                body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": " + isIncludedAndExtraCredit[0].ToString().ToLower() + ",\"isExtraCredit\": " + isIncludedAndExtraCredit[1].ToString().ToLower() + ",\"pointsPossible\": " + totalClasses + "}}";
                                connectingAPI(httpMethod, url, body);

                                //to update the registered students grades for the gradebook items in the course
                                foreach (int userId in userIdAndgrades.Keys)
                                {
                                    percentage = ((((double)userIdAndgrades[userId][0]) / totalClasses) * 100);
                                    httpMethod = "GET";
                                    url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebook/userGradebookItems?expand=grade"));
                                    body = "";
                                    isAttendedAttendancePercentageExists = getAllGradebookItemIdsOfUser(httpMethod, url, body);
                                    if (isAttendedAttendancePercentageExists)
                                    {
                                        //to get the grade Id's of user for attended
                                        httpMethod = "GET";
                                        url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfAttended + "/grade"));
                                        body = "";
                                        gradeId = getGradeId(httpMethod, url, body);
                                        //to update the grade of the user for item attended
                                        httpMethod = "PUT";
                                        url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfAttended + "/grade"));
                                        body = "{\"grade\": {\"id\":" + gradeId + ", \"points\": " + userIdAndgrades[userId][0] + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                        connectingAPI(httpMethod, url, body);
                                    }
                                    else
                                    {
                                        httpMethod = "POST";
                                        url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfAttended + "/grade"));
                                        body = "{\"grade\": {\"points\": " + userIdAndgrades[userId][0] + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                        connectingAPI(httpMethod, url, body);
                                    }
                                    percentage = ((((double)userIdAndgrades[userId][0]) / totalClasses) * 100);
                                    httpMethod = "GET";
                                    url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebook/userGradebookItems?expand=grade"));
                                    body = "";
                                    isMissedAttendancePercentageExists = getMissedGradebookItemIdOfUser(httpMethod, url, body);
                                    if (isMissedAttendancePercentageExists)
                                    {
                                        //to get the grade Id's of user for missed
                                        httpMethod = "GET";
                                        url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfMissed + "/grade"));
                                        body = "";
                                        gradeId = getGradeId(httpMethod, url, body);
                                        //to update the grade of the user for item missed
                                        httpMethod = "PUT";
                                        url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfMissed + "/grade"));
                                        body = "{\"grade\": {\"id\":" + gradeId + ", \"points\": " + userIdAndgrades[userId][1] + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                        connectingAPI(httpMethod, url, body);
                                    }
                                    else
                                    {
                                        httpMethod = "POST";
                                        url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfMissed + "/grade"));
                                        body = "{\"grade\": {\"points\": " + userIdAndgrades[userId][1] + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                        connectingAPI(httpMethod, url, body);

                                    }
                                }



                            }
                            #endregion
                            #region firstTime
                            else
                            {
                                url = new Uri(String.Format("{0}{1}/gradebook/customCategories", "https://api.learningstudio.com/courses/", courseID));
                                httpMethod = "POST";

                                //creates a custom gradebook category in course with name attended
                                body = "{\"customCategories\": {\"title\":\"Attended\",\"isAssignable\": true}}";
                                connectingAPI(httpMethod, url, body);

                                //creates a custom gradebook category in course with name Missed
                                body = "{\"customCategories\": {\"title\":\"Missed\",\"isAssignable\": true}}";
                                connectingAPI(httpMethod, url, body);

                                //creates a custom gradebook category in course with name Attendance Percentage
                                //body = "{\"customCategories\": {\"title\":\"Attendance Percentage\",\"isAssignable\": true}}";
                                //connectingAPI(httpMethod, url, body);

                                //to get GUID's of created gradebook categories in a course and save them in customGradebookCategoryAndGuid to create gradebook items
                                httpMethod = "GET";
                                body = "";
                                url = new Uri(String.Format("{0}{1}/gradebook/customCategories", "https://api.learningstudio.com/courses/", courseID));
                                customGradebookCategoryAndGuid = getGradebookCategory(httpMethod, url, body);

                                //getting the GUID values of custom gradebook  categories
                                //customCategoryGuidOfPercentage = customGradebookCategoryAndGuid.FirstOrDefault(x => x.Value.ToLower() == "attendance percentage").Key;
                                customCategoryGuidOfMissed = customGradebookCategoryAndGuid.FirstOrDefault(x => x.Value.ToLower() == "missed").Key;
                                customCategoryGuidOfAttended = customGradebookCategoryAndGuid.FirstOrDefault(x => x.Value.ToLower() == "attended").Key;

                                //creates custom gradebook items  in course

                                //Creating a custom gradebook item for gradebook category attended
                                httpMethod = "POST";
                                url = new Uri(String.Format("{0}{1}/gradebook/customCategories/{2}/customItems", "https://api.learningstudio.com/courses/", courseID, customCategoryGuidOfAttended));

                                body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": false,\"isExtraCredit\": false,\"pointsPossible\": " + totalClasses + "}}";
                                connectingAPI(httpMethod, url, body);

                                //Creating a custom gradebook item for gradebook category missed
                                url = new Uri(String.Format("{0}{1}/gradebook/customCategories/{2}/customItems", "https://api.learningstudio.com/courses/", courseID, customCategoryGuidOfMissed));

                                body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": false,\"isExtraCredit\": false,\"pointsPossible\": " + 0 + "}}";
                                connectingAPI(httpMethod, url, body);

                                //Creating a custom gradebook item for gradebook category Attendane Percentage
                                //url = new Uri(String.Format("{0}{1}/gradebook/customCategories/{2}/customItems", "https://api.learningstudio.com/courses/", courseID, customCategoryGuidOfPercentage));

                                //body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": false,\"isExtraCredit\": false,\"pointsPossible\": " + 0 + "}}";
                                //connectingAPI(httpMethod, url, body);

                                //to get the GUID'S of newly created gradebook items
                                httpMethod = "GET";
                                url = new Uri(String.Format("{0}{1}/gradebookItems", "https://api.learningstudio.com/courses/", courseID));
                                customGradebookItemAndGuid = getGradebookItems(httpMethod, url, body);

                                //getting the GUID values of custome gradebook items
                                gradebookItemGuidOfAttended = customGradebookItemAndGuid.FirstOrDefault(x => x.Value.ToLower() == "attended").Key;
                                gradebookItemGuidOfMissed = customGradebookItemAndGuid.FirstOrDefault(x => x.Value.ToLower() == "missed").Key;
                                //gradebookItemGuidOfPercentage = customGradebookItemAndGuid.FirstOrDefault(x => x.Value.ToLower() == "attendance percentage").Key;

                                //updating the gradebook item attended for the course with possible points
                                httpMethod = "PUT";
                                url = new Uri(String.Format("{0}{1}/gradebook/gradebookItems/{2}", "https://api.learningstudio.com/courses/", courseID, gradebookItemGuidOfAttended));
                                body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": false,\"isExtraCredit\": false,\"pointsPossible\": " + totalClasses + "}}";
                                connectingAPI(httpMethod, url, body);

                                url = new Uri(String.Format("{0}{1}/gradebook/gradebookItems/{2}", "https://api.learningstudio.com/courses/", courseID, gradebookItemGuidOfMissed));
                                body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": false,\"isExtraCredit\": false,\"pointsPossible\":0}}";

                                connectingAPI(httpMethod, url, body);

                                //url = new Uri(String.Format("{0}{1}/gradebook/gradebookItems/{2}", "https://api.learningstudio.com/courses/", courseID, gradebookItemGuidOfPercentage));
                                //body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": false,\"isExtraCredit\": false,\"pointsPossible\": 0}}";

                                //connectingAPI(httpMethod, url, body);

                                foreach (int userId in userIdAndgrades.Keys)
                                {
                                    httpMethod = "POST";
                                    url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfMissed + "/grade"));
                                    body = "{\"grade\": {\"points\": " + userIdAndgrades[userId][1] + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                    connectingAPI(httpMethod, url, body);

                                    url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfAttended + "/grade"));
                                    body = "{\"grade\": {\"points\": " + userIdAndgrades[userId][0] + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                    connectingAPI(httpMethod, url, body);

                                    //calculates attendance percentage of a student
                                    //percentage = ((((double)userIdAndgrades[userId][0]) / totalClasses) * 100);


                                    //url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfPercentage + "/grade"));
                                    //body = "{\"grade\": {\"points\": " + percentage + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                    //connectingAPI(httpMethod, url, body);
                                }

                            }
                            #endregion //end of updating second time
                        }
                    }
                    ApplicationLog.WriteThread2Log(courseCount + "." + "Gradebook with attendance information is updated for " + callNum + " at " + DateTime.Now + "_" + DateTime.Now.DayOfWeek);
                    ApplicationLog.WriteThread2Log("--------------------------------------------------------");
                }
                #endregion //end of updating all courses

            }//end of try
            catch (Exception ex)
            {

                ApplicationLog.WriteThread2Log(ex.Message + " " + DateTime.Now + "_" + DateTime.Now.DayOfWeek);
                throw ex;
            }

        }
        public void UpdateCourses2()
        {
            #region VariablesDeclaration

            Dictionary<string, List<int>> emailandattendance;
            List<int> studentAttendanceInfo;
            //variables to store unique identifiers
            Dictionary<string, string> customGradebookCategoryAndGuid = new Dictionary<string, string>();
            Dictionary<string, string> customGradebookItemAndGuid = new Dictionary<string, string>();
            Dictionary<string, int> emailanduserId = new Dictionary<string, int>();
            Dictionary<int, List<int>> userIdAndgrades = new Dictionary<int, List<int>>();
            int gradeId = 0, present = 0, missed = 0;
            double percentage = 0;
            string courseHomeUnitId = "";
            string customCategoryGuidOfAttended = "", gradebookItemGuidOfAttended = "";
            string customCategoryGuidOfMissed = "", gradebookItemGuidOfMissed = "";
            string customCategoryGuidOfPercentage = "", gradebookItemGuidOfPercentage = "";

            bool isAttendedAttendancePercentageExists = false;
            bool isMissedAttendancePercentageExists = false;
            int courseCount = 0;
            bool isAttendedMissedAttendancePercentageExists = false;
            #endregion //VariablesDeclaration
            // File.WriteAllText(@"C:\Thread3.txt", String.Empty);

            try
            {

                ApplicationLog.WriteThread3Log("Updating Gradebook in this thread started at: " + DateTime.Now + "_" + DateTime.Now.DayOfWeek);
                ApplicationLog.WriteThread3Log("Total courses updating in this thread are:" + callNumbersCount);
                #region Updating all courses
                foreach (string callNum in callNumbers)
                {
                    emailandattendance = new Dictionary<string, List<int>>();
                    //courseCount variable is to log the current number of course which is updating
                    courseCount++;
                    ApplicationLog.WriteThread3Log(courseCount + "." + "Course updating: _" + callNum);
                    //getting enrolled students ina course from our database
                    using (AttendanceTrackingDBDataContext db = new AttendanceTrackingDBDataContext())
                    {
                        int count = (from stu in db.students.ToList()
                                     join en in db.enrollments
                                     on stu.student_id equals en.student_id
                                     where en.call_number == callNum
                                     select stu).Count();


                        ApplicationLog.WriteThread1Log(courseCount + "." + "Total number of students in " + callNum + " are " + count);
                        //getting total number of classes for that course


                        //var totalClasses1 = (from at in db.attendances.ToList()
                        //                     where at.call_number == callNum
                        //                     select DateTime.Parse(at.created_at.ToString("MM-dd-yyyy")));

                        int totalClasses = (from at in db.attendances.ToList()
                                            where at.call_number == callNum
                                            select DateTime.Parse(at.created_at.Date.ToString("MM-dd-yyyy"))).Distinct().Count();

                        ApplicationLog.WriteThread1Log(courseCount + "." + "Total classes for " + callNum + " " + totalClasses);
                        //int count = studentEnrolls2.Count();
                        var studentEnrolls = from stu in db.students
                                             join en in db.enrollments
                                             on stu.student_id equals en.student_id
                                             where en.call_number == callNum
                                             select new { stu.s_number, stu.student_id };


                        //getting student attendance details from database and adding it to emailandattendace list
                        #region studentattendaceInfo
                        if (count != 0)
                        {
                            foreach (var students in studentEnrolls.ToList())
                            {
                                studentAttendanceInfo = new List<int>();
                                present = (from att in db.attendances.ToList()
                                           where att.call_number == callNum && att.student_id == students.student_id
                                           select DateTime.Parse(att.created_at.Date.ToString("MM-dd-yyyy"))).Distinct().Count();
                                studentAttendanceInfo.Add(present);
                                missed = totalClasses - present;
                                studentAttendanceInfo.Add(missed);
                                emailandattendance.Add(students.s_number, studentAttendanceInfo);
                            }
                        #endregion

                            //"8969167";
                            string httpMethod = "GET";
                            string body = "";
                            //to get the Northwest Online courseId for a course
                            Uri url = new Uri(String.Format("{0}ccn={1}", "https://api.learningstudio.com/courses/", callNum));
                            string courseID = "";
                            using (CourseIdReportDataContext Cid = new CourseIdReportDataContext())
                            {
                                courseID = (from ecourse in Cid.CourseIdReports.ToList()
                                            where ecourse.callNumber == callNum
                                            select ecourse.courseId).First();
                            }

                            ApplicationLog.WriteThread3Log(courseCount + "." + "Northwest Online course id for  " + callNum + " is " + courseID);
                            httpMethod = "GET";
                            body = "";

                            //to get all the existing gradebook categories in a course and save them in customGradebookCategoryAndGuid
                            url = new Uri(String.Format("{0}{1}/gradebook/customCategories", "https://api.learningstudio.com/courses/", courseID));
                            customGradebookCategoryAndGuid = getGradebookCategory(httpMethod, url, body);

                            //Gets the list of students registered in course     
                            httpMethod = "GET";
                            url = new Uri(String.Format("{0}{1}/students", "https://api.learningstudio.com/courses/", courseID));
                            body = "";
                            emailanduserId = getStudents(httpMethod, url, body);
                            userIdAndgrades = UserIdAndGrades(emailandattendance, emailanduserId);

                            //to get unit ID for course home gradebook item
                            httpMethod = "GET";
                            url = new Uri(String.Format("{0}{1}/items", "https://api.learningstudio.com/courses/", courseID));
                            courseHomeUnitId = getCoureHomeId(httpMethod, url, body);


                            #region secondTime
                            //creates custom gradebook categories if they are not present in course
                            if (customGradebookCategoryAndGuid.ContainsValue("Attended") && customGradebookCategoryAndGuid.ContainsValue("Missed"))
                            {

                                //check if custom gradebook items are created for custom gradebook categories
                                httpMethod = "GET";
                                url = new Uri(String.Format("{0}{1}/gradebookItems", "https://api.learningstudio.com/courses/", courseID));
                                customGradebookItemAndGuid = getGradebookItems(httpMethod, url, body);

                                //getting the GUID values of custome gradebook items
                                gradebookItemGuidOfAttended = customGradebookItemAndGuid.FirstOrDefault(x => x.Value.ToLower() == "attended").Key;
                                gradebookItemGuidOfMissed = customGradebookItemAndGuid.FirstOrDefault(x => x.Value.ToLower() == "missed").Key;
                                //gradebookItemGuidOfPercentage = customGradebookItemAndGuid.FirstOrDefault(x => x.Value.ToLower() == "attendance percentage").Key;

                                //getting isIncludedingrade or extra credit values for gradebook item attended
                                httpMethod = "GET";
                                url = new Uri(String.Format("{0}{1}/gradebookItems/{2}", "https://api.learningstudio.com/courses/", courseID, gradebookItemGuidOfAttended));
                                bool[] isIncludedAndExtraCredit = getIncludedAndextraCreditForItem(httpMethod, url, body);

                                //updating the gradebook item attended for the course with possible points
                                httpMethod = "PUT";
                                url = new Uri(String.Format("{0}{1}/gradebook/gradebookItems/{2}", "https://api.learningstudio.com/courses/", courseID, gradebookItemGuidOfAttended));
                                body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": " + isIncludedAndExtraCredit[0].ToString().ToLower() + ",\"isExtraCredit\": " + isIncludedAndExtraCredit[1].ToString().ToLower() + ",\"pointsPossible\": " + totalClasses + "}}";
                                connectingAPI(httpMethod, url, body);

                                //to update the registered students grades for the gradebook items in the course
                                foreach (int userId in userIdAndgrades.Keys)
                                {
                                    percentage = ((((double)userIdAndgrades[userId][0]) / totalClasses) * 100);
                                    httpMethod = "GET";
                                    url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebook/userGradebookItems?expand=grade"));
                                    body = "";
                                    isAttendedAttendancePercentageExists = getAllGradebookItemIdsOfUser(httpMethod, url, body);
                                    if (isAttendedAttendancePercentageExists)
                                    {
                                        //to get the grade Id's of user for attended
                                        httpMethod = "GET";
                                        url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfAttended + "/grade"));
                                        body = "";
                                        gradeId = getGradeId(httpMethod, url, body);
                                        //to update the grade of the user for item attended
                                        httpMethod = "PUT";
                                        url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfAttended + "/grade"));
                                        body = "{\"grade\": {\"id\":" + gradeId + ", \"points\": " + userIdAndgrades[userId][0] + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                        connectingAPI(httpMethod, url, body);
                                    }
                                    else
                                    {
                                        httpMethod = "POST";
                                        url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfAttended + "/grade"));
                                        body = "{\"grade\": {\"points\": " + userIdAndgrades[userId][0] + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                        connectingAPI(httpMethod, url, body);
                                    }
                                    percentage = ((((double)userIdAndgrades[userId][0]) / totalClasses) * 100);
                                    httpMethod = "GET";
                                    url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebook/userGradebookItems?expand=grade"));
                                    body = "";
                                    isMissedAttendancePercentageExists = getMissedGradebookItemIdOfUser(httpMethod, url, body);
                                    if (isMissedAttendancePercentageExists)
                                    {
                                        //to get the grade Id's of user for missed
                                        httpMethod = "GET";
                                        url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfMissed + "/grade"));
                                        body = "";
                                        gradeId = getGradeId(httpMethod, url, body);
                                        //to update the grade of the user for item missed
                                        httpMethod = "PUT";
                                        url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfMissed + "/grade"));
                                        body = "{\"grade\": {\"id\":" + gradeId + ", \"points\": " + userIdAndgrades[userId][1] + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                        connectingAPI(httpMethod, url, body);
                                    }
                                    else
                                    {
                                        httpMethod = "POST";
                                        url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfMissed + "/grade"));
                                        body = "{\"grade\": {\"points\": " + userIdAndgrades[userId][1] + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                        connectingAPI(httpMethod, url, body);

                                    }
                                }


                            }
                            #endregion
                            #region firstTime
                            else
                            {
                                url = new Uri(String.Format("{0}{1}/gradebook/customCategories", "https://api.learningstudio.com/courses/", courseID));
                                httpMethod = "POST";

                                //creates a custom gradebook category in course with name attended
                                body = "{\"customCategories\": {\"title\":\"Attended\",\"isAssignable\": true}}";
                                connectingAPI(httpMethod, url, body);

                                //creates a custom gradebook category in course with name Missed
                                body = "{\"customCategories\": {\"title\":\"Missed\",\"isAssignable\": true}}";
                                connectingAPI(httpMethod, url, body);

                                //creates a custom gradebook category in course with name Attendance Percentage
                                //body = "{\"customCategories\": {\"title\":\"Attendance Percentage\",\"isAssignable\": true}}";
                                //connectingAPI(httpMethod, url, body);

                                //to get GUID's of created gradebook categories in a course and save them in customGradebookCategoryAndGuid to create gradebook items
                                httpMethod = "GET";
                                body = "";
                                url = new Uri(String.Format("{0}{1}/gradebook/customCategories", "https://api.learningstudio.com/courses/", courseID));
                                customGradebookCategoryAndGuid = getGradebookCategory(httpMethod, url, body);

                                //getting the GUID values of custom gradebook  categories
                                //customCategoryGuidOfPercentage = customGradebookCategoryAndGuid.FirstOrDefault(x => x.Value.ToLower() == "attendance percentage").Key;
                                customCategoryGuidOfMissed = customGradebookCategoryAndGuid.FirstOrDefault(x => x.Value.ToLower() == "missed").Key;
                                customCategoryGuidOfAttended = customGradebookCategoryAndGuid.FirstOrDefault(x => x.Value.ToLower() == "attended").Key;

                                //creates custom gradebook items  in course

                                //Creating a custom gradebook item for gradebook category attended
                                httpMethod = "POST";
                                url = new Uri(String.Format("{0}{1}/gradebook/customCategories/{2}/customItems", "https://api.learningstudio.com/courses/", courseID, customCategoryGuidOfAttended));

                                body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": false,\"isExtraCredit\": false,\"pointsPossible\": " + totalClasses + "}}";
                                connectingAPI(httpMethod, url, body);

                                //Creating a custom gradebook item for gradebook category missed
                                url = new Uri(String.Format("{0}{1}/gradebook/customCategories/{2}/customItems", "https://api.learningstudio.com/courses/", courseID, customCategoryGuidOfMissed));

                                body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": false,\"isExtraCredit\": false,\"pointsPossible\": " + 0 + "}}";
                                connectingAPI(httpMethod, url, body);

                                //Creating a custom gradebook item for gradebook category Attendane Percentage
                                //url = new Uri(String.Format("{0}{1}/gradebook/customCategories/{2}/customItems", "https://api.learningstudio.com/courses/", courseID, customCategoryGuidOfPercentage));

                                //body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": false,\"isExtraCredit\": false,\"pointsPossible\": " + 0 + "}}";
                                //connectingAPI(httpMethod, url, body);

                                //to get the GUID'S of newly created gradebook items
                                httpMethod = "GET";
                                url = new Uri(String.Format("{0}{1}/gradebookItems", "https://api.learningstudio.com/courses/", courseID));
                                customGradebookItemAndGuid = getGradebookItems(httpMethod, url, body);

                                //getting the GUID values of custome gradebook items
                                gradebookItemGuidOfAttended = customGradebookItemAndGuid.FirstOrDefault(x => x.Value.ToLower() == "attended").Key;
                                gradebookItemGuidOfMissed = customGradebookItemAndGuid.FirstOrDefault(x => x.Value.ToLower() == "missed").Key;
                                //gradebookItemGuidOfPercentage = customGradebookItemAndGuid.FirstOrDefault(x => x.Value.ToLower() == "attendance percentage").Key;

                                //updating the gradebook item attended for the course with possible points
                                httpMethod = "PUT";
                                url = new Uri(String.Format("{0}{1}/gradebook/gradebookItems/{2}", "https://api.learningstudio.com/courses/", courseID, gradebookItemGuidOfAttended));
                                body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": false,\"isExtraCredit\": false,\"pointsPossible\": " + totalClasses + "}}";
                                connectingAPI(httpMethod, url, body);

                                url = new Uri(String.Format("{0}{1}/gradebook/gradebookItems/{2}", "https://api.learningstudio.com/courses/", courseID, gradebookItemGuidOfMissed));
                                body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": false,\"isExtraCredit\": false,\"pointsPossible\":0}}";

                                connectingAPI(httpMethod, url, body);

                                //url = new Uri(String.Format("{0}{1}/gradebook/gradebookItems/{2}", "https://api.learningstudio.com/courses/", courseID, gradebookItemGuidOfPercentage));
                                //body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": false,\"isExtraCredit\": false,\"pointsPossible\": 0}}";

                                //connectingAPI(httpMethod, url, body);

                                foreach (int userId in userIdAndgrades.Keys)
                                {
                                    httpMethod = "POST";
                                    url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfMissed + "/grade"));
                                    body = "{\"grade\": {\"points\": " + userIdAndgrades[userId][1] + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                    connectingAPI(httpMethod, url, body);

                                    url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfAttended + "/grade"));
                                    body = "{\"grade\": {\"points\": " + userIdAndgrades[userId][0] + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                    connectingAPI(httpMethod, url, body);

                                    ////calculates attendance percentage of a student
                                    //percentage = ((((double)userIdAndgrades[userId][0]) / totalClasses) * 100);


                                    //url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfPercentage + "/grade"));
                                    //body = "{\"grade\": {\"points\": " + percentage + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                    //connectingAPI(httpMethod, url, body);
                                }

                            }
                            #endregion //end of updating second time
                        }
                    }
                    ApplicationLog.WriteThread3Log(courseCount + "." + "Gradebook with attendance information is updated for " + callNum + " at " + DateTime.Now + "_" + DateTime.Now.DayOfWeek);
                    ApplicationLog.WriteThread3Log("------------------------------------------------------------------------");
                }
                #endregion //end of updating all courses

            }//end of try
            catch (Exception ex)
            {

                ApplicationLog.WriteThread3Log(ex.Message + " " + DateTime.Now + "_" + DateTime.Now.DayOfWeek);
                throw ex;
            }

        }
        public void UpdateCourses3()
        {
            #region VariablesDeclaration

            Dictionary<string, List<int>> emailandattendance;
            List<int> studentAttendanceInfo;
            //variables to store unique identifiers
            Dictionary<string, string> customGradebookCategoryAndGuid = new Dictionary<string, string>();
            Dictionary<string, string> customGradebookItemAndGuid = new Dictionary<string, string>();
            Dictionary<string, int> emailanduserId = new Dictionary<string, int>();
            Dictionary<int, List<int>> userIdAndgrades = new Dictionary<int, List<int>>();
            int gradeId = 0, present = 0, missed = 0;
            double percentage = 0;
            string courseHomeUnitId = "";
            string customCategoryGuidOfAttended = "", gradebookItemGuidOfAttended = "";
            string customCategoryGuidOfMissed = "", gradebookItemGuidOfMissed = "";
            string customCategoryGuidOfPercentage = "", gradebookItemGuidOfPercentage = "";
            bool isAttendedAttendancePercentageExists = false;
            bool isMissedAttendancePercentageExists = false;
            int courseCount = 0;
            bool isAttendedMissedAttendancePercentageExists = false;
            #endregion //VariablesDeclaration
            //File.WriteAllText(@"C:\Thread4.txt", String.Empty);

            try
            {

                ApplicationLog.WriteThread4Log("Updating Gradebook in this thread started at: " + DateTime.Now + "_" + DateTime.Now.DayOfWeek);
                ApplicationLog.WriteThread4Log("Total courses updating in this thread are:" + callNumbersCount);
                #region Updating all courses
                foreach (string callNum in callNumbers)
                {
                    emailandattendance = new Dictionary<string, List<int>>();
                    //courseCount variable is to log the current number of course which is updating
                    courseCount++;
                    ApplicationLog.WriteThread4Log(courseCount + "." + "Course updating: _" + callNum);
                    //getting enrolled students ina course from our database
                    using (AttendanceTrackingDBDataContext db = new AttendanceTrackingDBDataContext())
                    {
                        int count = (from stu in db.students.ToList()
                                     join en in db.enrollments
                                     on stu.student_id equals en.student_id
                                     where en.call_number == callNum
                                     select stu).Count();


                        ApplicationLog.WriteThread1Log(courseCount + "." + "Total number of students in " + callNum + " are " + count);
                        //getting total number of classes for that course


                        //var totalClasses1 = (from at in db.attendances.ToList()
                        //                     where at.call_number == callNum
                        //                     select DateTime.Parse(at.created_at.ToString("MM-dd-yyyy")));

                        int totalClasses = (from at in db.attendances.ToList()
                                            where at.call_number == callNum
                                            select DateTime.Parse(at.created_at.Date.ToString("MM-dd-yyyy"))).Distinct().Count();

                        ApplicationLog.WriteThread1Log(courseCount + "." + "Total classes for " + callNum + " " + totalClasses);
                        //int count = studentEnrolls2.Count();
                        var studentEnrolls = from stu in db.students
                                             join en in db.enrollments
                                             on stu.student_id equals en.student_id
                                             where en.call_number == callNum
                                             select new { stu.s_number, stu.student_id };


                        //getting student attendance details from database and adding it to emailandattendace list
                        #region studentattendaceInfo
                        if (count != 0)
                        {
                            foreach (var students in studentEnrolls.ToList())
                            {
                                studentAttendanceInfo = new List<int>();
                                present = (from att in db.attendances.ToList()
                                           where att.call_number == callNum && att.student_id == students.student_id
                                           select DateTime.Parse(att.created_at.Date.ToString("MM-dd-yyyy"))).Distinct().Count();
                                studentAttendanceInfo.Add(present);
                                missed = totalClasses - present;
                                studentAttendanceInfo.Add(missed);
                                emailandattendance.Add(students.s_number, studentAttendanceInfo);
                            }
                        #endregion

                            //"8969167";
                            string httpMethod = "GET";
                            string body = "";
                            //to get the Northwest Online courseId for a course
                            Uri url = new Uri(String.Format("{0}ccn={1}", "https://api.learningstudio.com/courses/", callNum));
                            string courseID = "";
                            using (CourseIdReportDataContext Cid = new CourseIdReportDataContext())
                            {
                                courseID = (from ecourse in Cid.CourseIdReports.ToList()
                                            where ecourse.callNumber == callNum
                                            select ecourse.courseId).First();
                            }

                            ApplicationLog.WriteThread4Log(courseCount + "." + "Northwest Online course id for  " + callNum + " is " + courseID);
                            httpMethod = "GET";
                            body = "";

                            //to get all the existing gradebook categories in a course and save them in customGradebookCategoryAndGuid
                            url = new Uri(String.Format("{0}{1}/gradebook/customCategories", "https://api.learningstudio.com/courses/", courseID));
                            customGradebookCategoryAndGuid = getGradebookCategory(httpMethod, url, body);

                            //Gets the list of students registered in course     
                            httpMethod = "GET";
                            url = new Uri(String.Format("{0}{1}/students", "https://api.learningstudio.com/courses/", courseID));
                            body = "";
                            emailanduserId = getStudents(httpMethod, url, body);
                            userIdAndgrades = UserIdAndGrades(emailandattendance, emailanduserId);

                            //to get unit ID for course home gradebook item
                            httpMethod = "GET";
                            url = new Uri(String.Format("{0}{1}/items", "https://api.learningstudio.com/courses/", courseID));
                            courseHomeUnitId = getCoureHomeId(httpMethod, url, body);


                            #region secondTime
                            //creates custom gradebook categories if they are not present in course
                            if (customGradebookCategoryAndGuid.ContainsValue("Attended") && customGradebookCategoryAndGuid.ContainsValue("Missed"))
                            {

                                //check if custom gradebook items are created for custom gradebook categories
                                httpMethod = "GET";
                                url = new Uri(String.Format("{0}{1}/gradebookItems", "https://api.learningstudio.com/courses/", courseID));
                                customGradebookItemAndGuid = getGradebookItems(httpMethod, url, body);

                                //getting the GUID values of custome gradebook items
                                gradebookItemGuidOfAttended = customGradebookItemAndGuid.FirstOrDefault(x => x.Value.ToLower() == "attended").Key;
                                gradebookItemGuidOfMissed = customGradebookItemAndGuid.FirstOrDefault(x => x.Value.ToLower() == "missed").Key;
                                gradebookItemGuidOfPercentage = customGradebookItemAndGuid.FirstOrDefault(x => x.Value.ToLower() == "attendance percentage").Key;

                                //getting isIncludedingrade or extra credit values for gradebook item attended
                                httpMethod = "GET";
                                url = new Uri(String.Format("{0}{1}/gradebookItems/{2}", "https://api.learningstudio.com/courses/", courseID, gradebookItemGuidOfAttended));
                                bool[] isIncludedAndExtraCredit = getIncludedAndextraCreditForItem(httpMethod, url, body);

                                //updating the gradebook item attended for the course with possible points
                                httpMethod = "PUT";
                                url = new Uri(String.Format("{0}{1}/gradebook/gradebookItems/{2}", "https://api.learningstudio.com/courses/", courseID, gradebookItemGuidOfAttended));
                                body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": " + isIncludedAndExtraCredit[0].ToString().ToLower() + ",\"isExtraCredit\": " + isIncludedAndExtraCredit[1].ToString().ToLower() + ",\"pointsPossible\": " + totalClasses + "}}";
                                connectingAPI(httpMethod, url, body);

                                //to update the registered students grades for the gradebook items in the course
                                foreach (int userId in userIdAndgrades.Keys)
                                {
                                    percentage = ((((double)userIdAndgrades[userId][0]) / totalClasses) * 100);
                                    httpMethod = "GET";
                                    url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebook/userGradebookItems?expand=grade"));
                                    body = "";
                                    
                                    isAttendedAttendancePercentageExists = getAllGradebookItemIdsOfUser(httpMethod, url, body);
                                    if (isAttendedAttendancePercentageExists)
                                    {
                                        //to get the grade Id's of user for attended
                                        httpMethod = "GET";
                                        url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfAttended + "/grade"));
                                        body = "";
                                        gradeId = getGradeId(httpMethod, url, body);
                                        //to update the grade of the user for item attended
                                        httpMethod = "PUT";
                                        url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfAttended + "/grade"));
                                        body = "{\"grade\": {\"id\":" + gradeId + ", \"points\": " + userIdAndgrades[userId][0] + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                        connectingAPI(httpMethod, url, body);
                                    }
                                    else
                                    {
                                        httpMethod = "POST";
                                        url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfAttended + "/grade"));
                                        body = "{\"grade\": {\"points\": " + userIdAndgrades[userId][0] + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                        connectingAPI(httpMethod, url, body);
                                    }
                                    percentage = ((((double)userIdAndgrades[userId][0]) / totalClasses) * 100);
                                    httpMethod = "GET";
                                    url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebook/userGradebookItems?expand=grade"));
                                    body = "";

                                    isMissedAttendancePercentageExists = getMissedGradebookItemIdOfUser(httpMethod, url, body);
                                    if (isMissedAttendancePercentageExists)
                                    {
                                        //to get the grade Id's of user for missed
                                        httpMethod = "GET";
                                        url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfMissed + "/grade"));
                                        body = "";
                                        gradeId = getGradeId(httpMethod, url, body);
                                        //to update the grade of the user for item missed
                                        httpMethod = "PUT";
                                        url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfMissed + "/grade"));
                                        body = "{\"grade\": {\"id\":" + gradeId + ", \"points\": " + userIdAndgrades[userId][1] + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                        connectingAPI(httpMethod, url, body);
                                    }
                                    else
                                    {
                                        httpMethod = "POST";
                                        url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfMissed + "/grade"));
                                        body = "{\"grade\": {\"points\": " + userIdAndgrades[userId][1] + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                        connectingAPI(httpMethod, url, body);

                                    }
                                }


                            }
                            #endregion
                            #region firstTime
                            else
                            {
                                url = new Uri(String.Format("{0}{1}/gradebook/customCategories", "https://api.learningstudio.com/courses/", courseID));
                                httpMethod = "POST";

                                //creates a custom gradebook category in course with name attended
                                body = "{\"customCategories\": {\"title\":\"Attended\",\"isAssignable\": true}}";
                                connectingAPI(httpMethod, url, body);

                                //creates a custom gradebook category in course with name Missed
                                body = "{\"customCategories\": {\"title\":\"Missed\",\"isAssignable\": true}}";
                                connectingAPI(httpMethod, url, body);

                                //creates a custom gradebook category in course with name Attendance Percentage
                                //body = "{\"customCategories\": {\"title\":\"Attendance Percentage\",\"isAssignable\": true}}";
                                //connectingAPI(httpMethod, url, body);

                                //to get GUID's of created gradebook categories in a course and save them in customGradebookCategoryAndGuid to create gradebook items
                                httpMethod = "GET";
                                body = "";
                                url = new Uri(String.Format("{0}{1}/gradebook/customCategories", "https://api.learningstudio.com/courses/", courseID));
                                customGradebookCategoryAndGuid = getGradebookCategory(httpMethod, url, body);

                                //getting the GUID values of custom gradebook  categories
                                //customCategoryGuidOfPercentage = customGradebookCategoryAndGuid.FirstOrDefault(x => x.Value.ToLower() == "attendance percentage").Key;
                                customCategoryGuidOfMissed = customGradebookCategoryAndGuid.FirstOrDefault(x => x.Value.ToLower() == "missed").Key;
                                customCategoryGuidOfAttended = customGradebookCategoryAndGuid.FirstOrDefault(x => x.Value.ToLower() == "attended").Key;

                                //creates custom gradebook items  in course

                                //Creating a custom gradebook item for gradebook category attended
                                httpMethod = "POST";
                                url = new Uri(String.Format("{0}{1}/gradebook/customCategories/{2}/customItems", "https://api.learningstudio.com/courses/", courseID, customCategoryGuidOfAttended));

                                body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": false,\"isExtraCredit\": false,\"pointsPossible\": " + totalClasses + "}}";
                                connectingAPI(httpMethod, url, body);

                                //Creating a custom gradebook item for gradebook category missed
                                url = new Uri(String.Format("{0}{1}/gradebook/customCategories/{2}/customItems", "https://api.learningstudio.com/courses/", courseID, customCategoryGuidOfMissed));

                                body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": false,\"isExtraCredit\": false,\"pointsPossible\": " + 0 + "}}";
                                connectingAPI(httpMethod, url, body);

                                //Creating a custom gradebook item for gradebook category Attendane Percentage
                                //url = new Uri(String.Format("{0}{1}/gradebook/customCategories/{2}/customItems", "https://api.learningstudio.com/courses/", courseID, customCategoryGuidOfPercentage));

                                //body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": false,\"isExtraCredit\": false,\"pointsPossible\": " + 0 + "}}";
                                //connectingAPI(httpMethod, url, body);

                                //to get the GUID'S of newly created gradebook items
                                httpMethod = "GET";
                                url = new Uri(String.Format("{0}{1}/gradebookItems", "https://api.learningstudio.com/courses/", courseID));
                                customGradebookItemAndGuid = getGradebookItems(httpMethod, url, body);

                                //getting the GUID values of custome gradebook items
                                gradebookItemGuidOfAttended = customGradebookItemAndGuid.FirstOrDefault(x => x.Value.ToLower() == "attended").Key;
                                gradebookItemGuidOfMissed = customGradebookItemAndGuid.FirstOrDefault(x => x.Value.ToLower() == "missed").Key;
                                //gradebookItemGuidOfPercentage = customGradebookItemAndGuid.FirstOrDefault(x => x.Value.ToLower() == "attendance percentage").Key;

                                //updating the gradebook item attended for the course with possible points
                                httpMethod = "PUT";
                                url = new Uri(String.Format("{0}{1}/gradebook/gradebookItems/{2}", "https://api.learningstudio.com/courses/", courseID, gradebookItemGuidOfAttended));
                                body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": false,\"isExtraCredit\": false,\"pointsPossible\": " + totalClasses + "}}";
                                connectingAPI(httpMethod, url, body);

                                url = new Uri(String.Format("{0}{1}/gradebook/gradebookItems/{2}", "https://api.learningstudio.com/courses/", courseID, gradebookItemGuidOfMissed));
                                body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": false,\"isExtraCredit\": false,\"pointsPossible\":0}}";

                                connectingAPI(httpMethod, url, body);

                                //url = new Uri(String.Format("{0}{1}/gradebook/gradebookItems/{2}", "https://api.learningstudio.com/courses/", courseID, gradebookItemGuidOfPercentage));
                                //body = "{\"customItem\": {\"unitID\":" + courseHomeUnitId + ",\"isIncludedInGrade\": false,\"isExtraCredit\": false,\"pointsPossible\": 0}}";

                                //connectingAPI(httpMethod, url, body);

                                foreach (int userId in userIdAndgrades.Keys)
                                {
                                    httpMethod = "POST";
                                    url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfMissed + "/grade"));
                                    body = "{\"grade\": {\"points\": " + userIdAndgrades[userId][1] + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                    connectingAPI(httpMethod, url, body);

                                    url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfAttended + "/grade"));
                                    body = "{\"grade\": {\"points\": " + userIdAndgrades[userId][0] + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                    connectingAPI(httpMethod, url, body);

                                    //calculates attendance percentage of a student
                                    //percentage = ((((double)userIdAndgrades[userId][0]) / totalClasses) * 100);


                                    //url = new Uri(String.Format("https://api.learningstudio.com/users/" + userId + "/courses/" + courseID + "/gradebookItems/" + gradebookItemGuidOfPercentage + "/grade"));
                                    //body = "{\"grade\": {\"points\": " + percentage + ",\"letterGrade\": \"\",\"comments\":\"\", }}";
                                    //connectingAPI(httpMethod, url, body);
                                }

                            }
                            #endregion //end of updating second time
                        }
                    }
                    ApplicationLog.WriteThread4Log(courseCount + "." + "Gradebook with attendance information is updated for " + callNum + " at " + DateTime.Now + "_" + DateTime.Now.DayOfWeek);
                    ApplicationLog.WriteThread4Log("------------------------------------------------------------------------");
                }
                #endregion //end of updating all courses

            }//end of try
            catch (Exception ex)
            {

                ApplicationLog.WriteThread4Log(ex.Message + " " + DateTime.Now + "_" + DateTime.Now.DayOfWeek);
                throw ex;
            }

        }
        #region connectinAPI
        public static Response connectingAPI(string httpMethod, Uri url, string body)
        {
            //Sand Box details
            //string appID = "2e4cfa6e-4985-421a-9197-04ea69b44e6c";
            //string consumerKey = "04b11650-b3bb-41d6-91a6-c19936aaf4e5";
            //string secret = "8a72063be6d0409da86a5c239e39fd10";

            //API details of the Northwest Online
            string appID = "2e4cfa6e-4985-421a-9197-04ea69b44e6c";
            string consumerKey = "3929bb45-ea22-4066-b30f-08583c5dbbf1";
            string secret = "6bc16d844619476080c64a0e25dc5184";
            string signatureMethod = "CMAC-AES";
            MemoryStream requestBody = null;
            HttpWebResponse httpWebResponse = null;
            Response response = new Response();
            HttpWebRequest request = null;
            // Set the Nonce and Timestamp parameters
            string nonce = getNonce();
            string timestamp = getTimestamp();

            // Set the request body if making a POST or PUT request
            if (httpMethod == "POST" || httpMethod == "PUT")
            {
                requestBody = new MemoryStream(Encoding.UTF8.GetBytes(body));
            }


            // Create the OAuth parameter name/value pair dictionary
            Dictionary<string, string> oauthParams = new Dictionary<string, string>
      {
        { "oauth_consumer_key", consumerKey },
        { "application_id", appID },
        { "oauth_signature_method", signatureMethod },
        { "oauth_timestamp", timestamp },
        { "oauth_nonce", nonce },
      };

            // Get the OAuth 1.0 Signature
            string signature = generateSignature(httpMethod, url, oauthParams, requestBody, secret);


            // Add the oauth_signature parameter to the set of OAuth Parameters
            IEnumerable<KeyValuePair<string, string>> allParams = oauthParams.Union(new[]
      {
        new KeyValuePair<string, string>("oauth_signature", signature)
      });

            // Defines a query that produces a set of: keyname="URL-encoded(value)"
            IEnumerable<string> encodedParams = from param in allParams
                                                select param.Key + "=\"" + Uri.EscapeDataString(param.Value) + "\"";

            // Join all encoded parameters with a comma delimiter and convert to a string
            string stringParams = String.Join(",", encodedParams);

            // Build the X-Authorization request header
            string xauth = String.Format("X-Authorization: OAuth realm=\"{0}\",{1}", url, stringParams);


            //Console.WriteLine(xauth);

            WebClient wc = new WebClient();

            try
            {
                // Setup the Request
                request = (HttpWebRequest)WebRequest.Create(url);
                request.Method = httpMethod;

                request.Headers.Add(xauth);

                // Set the request body if making a POST or PUT request
                if (httpMethod == "POST" || httpMethod == "PUT")
                {
                    //Console.WriteLine("Testing Body...." + body);
                    byte[] dataArray = Encoding.UTF8.GetBytes(body);

                    request.ContentLength = dataArray.Length;


                    Stream requestStream = request.GetRequestStream();


                    requestStream.Write(dataArray, 0, dataArray.Length);

                    requestStream.Close();
                }

                // Send Request & Get Response
                httpWebResponse = (HttpWebResponse)request.GetResponse();


                response.Method = httpMethod.ToString();
                response.Url = url.ToString();
                response.StatusCode = httpWebResponse.StatusCode;
                response.StatusMessage = httpWebResponse.StatusDescription;
                response.ContentType = httpWebResponse.ContentType;
                response.Headers = request.Headers;

                using (StreamReader streamReader = new StreamReader(httpWebResponse.GetResponseStream()))
                {
                    response.Content = streamReader.ReadToEnd().Trim();

                    if (string.IsNullOrWhiteSpace(response.Content))
                        response.Content = null;
                }
            }
            catch (WebException e)
            {
                // This exception will be raised if the server didn't return 200 - OK
                // Retrieve more information about the error
                if (e.Response != null)
                {
                    using (HttpWebResponse err = (HttpWebResponse)e.Response)
                    {
                        //Console.WriteLine("The server returned '{0}' with the status code '{1} ({2:d})'.",
                        //err.StatusDescription, err.StatusCode, err.StatusCode);
                    }
                }

            }
            finally
            {
                if (httpWebResponse != null)
                    httpWebResponse.Close();
            }
            return response;
        }
        #endregion
        #region Helper Functions

        /// <summary>
        /// Generates a random nonce.
        /// </summary>
        /// <returns>A unique identifier for the request.</returns>
        private static string getNonce()
        {
            string rtn = Path.GetRandomFileName() + Path.GetRandomFileName() + Path.GetRandomFileName();
            rtn = rtn.Replace(".", "");
            if (rtn.Length > 32)
                return rtn.Substring(0, 32);
            else
                return rtn;
        }
        /// <summary>
        /// Generates an integer representing the number of seconds since the unix epoch using the 
        /// UTC date/time of the request.
        /// </summary>
        /// <returns>A timestamp for the request.</returns>
        private static string getTimestamp()
        {
            return ((int)(DateTime.UtcNow - new DateTime(1970, 1, 1)).TotalSeconds).ToString();
        }
        /// <summary>
        /// Generates an OAuth 1.0 signature.
        /// </summary>
        /// <param name="httpMethod">The HTTP method of the request.</param>
        /// <param name="url">The URI of the request.</param>
        /// <param name="oauthParams">The associative set of signable oauth parameters.</param>
        /// <param name="requestBody">A stream containing the serialized message body.</param>
        /// <param name="secret">Alphanumeric string used to validate the identity of the education partner (Private Key).</param>
        /// <returns>A string containing the BASE64-encoded signature digest.</returns>
        private static string generateSignature(
          string httpMethod,
          Uri url,
          IDictionary<string, string> oauthParams,
          Stream requestBody,
          string secret
        )
        {
            // Ensure the HTTP Method is upper-cased
            httpMethod = httpMethod.ToUpper();

            // Construct the URL-encoded OAuth parameter portion of the signature base string
            string encodedParams = normalizeParams(httpMethod, url, oauthParams, requestBody);

            // URL-encode the relative URL
            string encodedUri = Uri.EscapeDataString(url.AbsolutePath);

            // Build the signature base string to be signed with the Consumer Secret
            string baseString = String.Format("{0}&{1}&{2}", httpMethod, encodedUri, encodedParams);

            return generateCmac(secret, baseString);
        }
        /// <summary>
        /// Normalizes all oauth signable parameters and url query parameters according to OAuth 1.0.
        /// </summary>
        /// <param name="httpMethod">The upper-cased HTTP method.</param>
        /// <param name="url">The request URL.</param>
        /// <param name="oauthParams">The associative set of signable oauth parameters.</param>
        /// <param name="requestBody">A stream containing the serialized message body.</param>
        /// <returns>A string containing normalized and encoded OAuth parameters.</returns>
        private static string normalizeParams(
          string httpMethod,
          Uri url,
          IEnumerable<KeyValuePair<string, string>> oauthParams,
          Stream requestBody
        )
        {
            IEnumerable<KeyValuePair<string, string>> kvpParams = oauthParams;

            // Place any Query String parameters into a key value pair using equals ("=") to mark
            // the key/value relationship and join each paramter with an ampersand ("&")
            if (!String.IsNullOrWhiteSpace(url.Query))
            {
                IEnumerable<KeyValuePair<string, string>> queryParams =
                  from p in url.Query.Substring(1).Split('&').AsEnumerable()
                  let key = Uri.EscapeDataString(p.Substring(0, p.IndexOf("=")))
                  let value = Uri.EscapeDataString(p.Substring(p.IndexOf("=") + 1))
                  select new KeyValuePair<string, string>(key, value);

                kvpParams = kvpParams.Union(queryParams);
            }

            // Include the body parameter if dealing with a POST or PUT request
            if (httpMethod == "POST" || httpMethod == "PUT")
            {
                MemoryStream ms = new MemoryStream();
                requestBody.CopyTo(ms);
                byte[] bodyBytes = ms.ToArray();

                string body = Convert.ToBase64String(bodyBytes, Base64FormattingOptions.None);
                body = Uri.EscapeDataString(body);

                kvpParams = kvpParams.Union(new[]
        {
          new KeyValuePair<string, string>("body", Uri.EscapeDataString(body))
        });
            }

            // Sort the parameters in lexicographical order, 1st by Key then by Value; separate with ("=")
            IEnumerable<string> sortedParams =
              from p in kvpParams
              orderby p.Key ascending, p.Value ascending
              select p.Key + "=" + p.Value;

            // Add the ampersand delimiter and then URL-encode the equals ("%3D") and ampersand ("%26")
            string stringParams = String.Join("&", sortedParams);
            string encodedParams = Uri.EscapeDataString(stringParams);

            return encodedParams;
        }
        /// <summary>
        /// Generates a BASE64-encoded CMAC-AES digest.
        /// </summary>
        /// <param name="key">The secret key used to sign the data.</param>
        /// <param name="msg">The data to be signed.</param>
        /// <returns>A CMAC-AES digest.</returns>
        private static string generateCmac(string key, string msg)
        {
            byte[] keyBytes = Encoding.UTF8.GetBytes(key);
            byte[] msgBytes = Encoding.UTF8.GetBytes(msg);

            CMac macProvider = new CMac(new AesFastEngine());
            macProvider.Init(new KeyParameter(keyBytes));
            macProvider.Reset();

            macProvider.BlockUpdate(msgBytes, 0, msgBytes.Length);
            byte[] output = new byte[macProvider.GetMacSize()];
            macProvider.DoFinal(output, 0);

            return Convert.ToBase64String(output);
        }
        #endregion
        #region HelpMethods
        public static Dictionary<int, List<int>> UserIdAndGrades(Dictionary<string, List<int>> emailandattendance, Dictionary<string, int> emailanduserId)
        {
            Dictionary<int, List<int>> userIdAndgrades = new Dictionary<int, List<int>>();
            foreach (string gradebookemail in emailanduserId.Keys)
            {
                foreach (string databaseemail in emailandattendance.Keys)
                {
                    if (gradebookemail.Substring(0, gradebookemail.IndexOf('@')).Equals(databaseemail))
                    {
                        userIdAndgrades.Add(emailanduserId[gradebookemail], emailandattendance[databaseemail]);
                    }
                }
            }
            return userIdAndgrades;
        }
        public static string getCourseId(string httpMethod, Uri url, string body)
        {
            string courseId = "";
            try
            {
                Response response = connectingAPI(httpMethod, url, body);
                dynamic data = JsonConvert.DeserializeObject<ExpandoObject>(response.Content, new Newtonsoft.Json.Converters.ExpandoObjectConverter());
                List<dynamic> courseDetails = data.userGradebookItems;
                foreach (dynamic item in courseDetails)
                {
                    courseId = item.id;
                }

            }
            catch (Exception ex)
            {
            }
            return courseId;
        }
        public static Dictionary<string, string> getGradebookCategory(string httpMethod, Uri url, string body)
        {

            Dictionary<string, string> customGradebookCategoryAndGuid = new Dictionary<string, string>();

            // Send Request & Get Response
            try
            {
                Response response = connectingAPI(httpMethod, url, body);
                dynamic data = JsonConvert.DeserializeObject<ExpandoObject>(response.Content, new Newtonsoft.Json.Converters.ExpandoObjectConverter());
                List<dynamic> customGradebookcategories = data.customCategories;
                foreach (dynamic item in customGradebookcategories)
                {
                    customGradebookCategoryAndGuid.Add(item.guid, item.title);
                }

            }
            catch (Exception ex)
            {

            }
            return customGradebookCategoryAndGuid;
        }
        public static Dictionary<string, int> getStudents(string httpMethod, Uri url, string body)
        {
            Dictionary<string, int> emailanduserId = new Dictionary<string, int>();

            try
            {
                Response response = connectingAPI(httpMethod, url, body);

                dynamic data = JsonConvert.DeserializeObject<ExpandoObject>(response.Content, new Newtonsoft.Json.Converters.ExpandoObjectConverter());
                List<dynamic> students = data.students;
                foreach (dynamic item in students)
                {
                    emailanduserId.Add(item.emailAddress, (int)item.id);
                }
            }
            catch (Exception ex)
            {

            }

            return emailanduserId;
        }
        public static string getCoureHomeId(string httpMethod, Uri url, string body)
        {
            string courseHomeId = "";


            try
            {
                Response response = connectingAPI(httpMethod, url, body);
                dynamic data = JsonConvert.DeserializeObject<ExpandoObject>(response.Content, new Newtonsoft.Json.Converters.ExpandoObjectConverter());
                List<dynamic> courseItems = data.items;
                foreach (dynamic item in courseItems)
                {
                    string title = item.title;
                    if (title == "Course Home")
                    {
                        courseHomeId = Convert.ToString(item.id);
                        break;
                    }
                }
            }
            catch (Exception ex)
            {

            }

            return courseHomeId;
        }
        public static Dictionary<string, string> getGradebookItems(string httpMethod, Uri url, string body)
        {
            Dictionary<string, string> customGradebookItemAndGuid = new Dictionary<string, string>();


            try
            {
                Response response = connectingAPI(httpMethod, url, body);
                dynamic data = JsonConvert.DeserializeObject<ExpandoObject>(response.Content, new Newtonsoft.Json.Converters.ExpandoObjectConverter());
                List<dynamic> gradebookItems = data.gradebookItems;
                foreach (dynamic item in gradebookItems)
                {
                    customGradebookItemAndGuid.Add(item.id, item.title);
                }
            }
            catch (Exception ex)
            {

            }

            return customGradebookItemAndGuid;
        }
        public static int getGradeId(string httpMethod, Uri url, string body)
        {
            int gradeId = 0;

            try
            {
                Response response = connectingAPI(httpMethod, url, body);

                dynamic data = JsonConvert.DeserializeObject<ExpandoObject>(response.Content, new Newtonsoft.Json.Converters.ExpandoObjectConverter());
                dynamic grades = data.grade;

                gradeId = (int)grades.id;

            }
            catch (Exception ex)
            {

            }

            return gradeId;
        }
        public bool getAllGradebookItemIdsOfUser(string httpMethod, Uri url, string body)
        {

            bool isAttendedMissedattendedPercentageExists = false;
            int count = 0;
            // Send Request & Get Response
            try
            {
                Response response = connectingAPI(httpMethod, url, body);
                dynamic data = JsonConvert.DeserializeObject<ExpandoObject>(response.Content, new Newtonsoft.Json.Converters.ExpandoObjectConverter());
                List<dynamic> gradebookItems = data.userGradebookItems;
                foreach (dynamic item in gradebookItems)
                {
                    if (item.gradebookItem.title == "Attended")
                    {
                        count++;
                    }
                    if (count == 1)
                    {
                        isAttendedMissedattendedPercentageExists = true;
                        break;
                    }
                }
            }
            catch (Exception ex)
            {

            }
            return isAttendedMissedattendedPercentageExists;
        }

        public bool getMissedGradebookItemIdOfUser(string httpMethod, Uri url, string body)
        {

            bool isAttendedMissedattendedPercentageExists = false;
            int count = 0;
            // Send Request & Get Response
            try
            {
                Response response = connectingAPI(httpMethod, url, body);
                dynamic data = JsonConvert.DeserializeObject<ExpandoObject>(response.Content, new Newtonsoft.Json.Converters.ExpandoObjectConverter());
                List<dynamic> gradebookItems = data.userGradebookItems;
                foreach (dynamic item in gradebookItems)
                {
                    if (item.gradebookItem.title == "Missed")
                    {
                        count++;
                    }
                    if (count == 1)
                    {
                        isAttendedMissedattendedPercentageExists = true;
                        break;
                    }
                }
            }
            catch (Exception ex)
            {

            }
            return isAttendedMissedattendedPercentageExists;
        }

        public static bool[] getIncludedAndextraCreditForItem(string httpMethod, Uri url, string body)
        {
            bool[] includedAndExtraCreditFlags = new bool[2];


            try
            {
                Response response = connectingAPI(httpMethod, url, body);
                dynamic data = JsonConvert.DeserializeObject<ExpandoObject>(response.Content, new Newtonsoft.Json.Converters.ExpandoObjectConverter());
                List<dynamic> gradebookItem = data.gradebookItems;
                foreach (dynamic item in gradebookItem)
                {
                    includedAndExtraCreditFlags[0] = item.isIncludedInGrade;
                    includedAndExtraCreditFlags[1] = item.isExtraCredit;
                }

            }
            catch (Exception ex)
            {

            }

            return includedAndExtraCreditFlags;
        }
        #endregion
    }
}
